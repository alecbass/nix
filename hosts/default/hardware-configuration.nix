# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.

# NOTE(alec): Hehe I modified it anyway to have variable laptop inputs
{ config, lib, pkgs, modulesPath, is-laptop, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = if is-laptop then [ "xhci_pci" "ahci" "nvme" "rtsx_usb_sdmmc" ] else [ "xhci_pci" "ahci" "nvme" "usbhid" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = if is-laptop then [] else [ "kvm-intel" "wl" ];
  boot.extraModulePackages = if is-laptop then [] else [ config.boot.kernelPackages.broadcom_sta ];

  fileSystems."/" =
    { device = if is-laptop then "/dev/disk/by-uuid/46d2e2d9-5c16-45f7-a500-663dcb50aac2" else "/dev/disk/by-uuid/5b3d0530-cc9c-4b3e-adf8-45eb98296dbb";
      fsType = "ext4";
    };

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.docker0.useDHCP = lib.mkDefault true;
  # networking.interfaces.docker_gwbridge.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp4s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.vethc908431.useDHCP = lib.mkDefault true;
  # networking.interfaces.vethdbcde42.useDHCP = lib.mkDefault true;
  # networking.interfaces.vethf4bbafc.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp5s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
